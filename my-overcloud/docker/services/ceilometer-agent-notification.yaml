heat_template_version: queens

description: >
  OpenStack containerized Ceilometer Agent Notification service

parameters:
  DockerCeilometerNotificationImage:
    description: image
    type: string
  DockerCeilometerConfigImage:
    description: The container image to use for the ceilometer config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean
  CeilometerEnablePanko:
    default: true
    description: Check if panko need to be enabled or not.
    type: boolean

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  CeilometerAgentNotificationBase:
    type: ../../puppet/services/ceilometer-agent-notification.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

conditions:
  ceilometer_enable_panko: {equals: [{get_param: CeilometerEnablePanko}, True]}

outputs:
  role_data:
    description: Role data for the Ceilometer Agent Notification role.
    value:
      service_name: {get_attr: [CeilometerAgentNotificationBase, role_data, service_name]}
      config_settings: {get_attr: [CeilometerAgentNotificationBase, role_data, config_settings]}
      logging_source: {get_attr: [CeilometerAgentNotificationBase, role_data, logging_source]}
      logging_groups: {get_attr: [CeilometerAgentNotificationBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [CeilometerAgentNotificationBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: ceilometer
        puppet_tags: ceilometer_config
        step_config:
          get_attr: [CeilometerAgentNotificationBase, role_data, step_config]
        config_image: {get_param: DockerCeilometerConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/ceilometer_agent_notification.json:
          map_merge:
            - command: /usr/bin/ceilometer-agent-notification --logfile /var/log/ceilometer/agent-notification.log
              config_files:
                list_concat:
                  - - source: "/var/lib/kolla/config_files/src/*"
                      dest: "/"
                      merge: true
                      preserve_properties: true
                  - if:
                      - ceilometer_enable_panko
                      - - source: "/var/lib/kolla/config_files/src-panko/*"
                          dest: "/"
                          merge: true
                          preserve_properties: true
                      - null
            - if:
              - ceilometer_enable_panko
              - permissions:
                  - path: /etc/panko
                    owner: root:ceilometer
                    recurse: true
              - {}

      docker_config:
        step_3:
          ceilometer_init_log:
            start_order: 0
            image: &ceilometer_agent_notification_image {get_param: DockerCeilometerNotificationImage}
            user: root
            command: ['/bin/bash', '-c', 'chown -R ceilometer:ceilometer /var/log/ceilometer']
            volumes:
              - /var/log/containers/ceilometer:/var/log/ceilometer
        step_4:
          ceilometer_agent_notification:
            image: *ceilometer_agent_notification_image
            net: host
            privileged: false
            restart: always
            healthcheck:
              test:
                list_join:
                  - ' '
                  - - '/openstack/healthcheck'
                    - yaql:
                        expression: str($.data.port)
                        data:
                          port: {get_attr: [CeilometerAgentNotificationBase, role_data, config_settings, 'ceilometer::rabbit_port']}
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/ceilometer_agent_notification.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/ceilometer:/var/lib/kolla/config_files/src:ro
                  - /var/log/containers/ceilometer:/var/log/ceilometer:z
                - if:
                  - ceilometer_enable_panko
                  - - /var/lib/config-data/puppet-generated/panko:/var/lib/kolla/config_files/src-panko:ro
                  - []

            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item.path }}"
            state: directory
            setype: "{{ item.setype }}"
          with_items:
            - { 'path': /var/log/containers/ceilometer, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/log/ceilometer, 'setype': svirt_sandbox_file_t }
        - name: ceilometer logs readme
          copy:
            dest: /var/log/ceilometer/readme.txt
            content: |
              Log files from ceilometer containers can be found under
              /var/log/containers/ceilometer.
          ignore_errors: true
      upgrade_tasks:
        - when: step|int == 0
          tags: common
          block:
            - name: Check if ceilometer_agent_notification is deployed
              command: systemctl is-enabled --quiet openstack-ceilometer-notification
              ignore_errors: True
              register: ceilometer_agent_notification_enabled_result
            - name: Set fact ceilometer_agent_notification_enabled
              set_fact:
                ceilometer_agent_notification_enabled: "{{ ceilometer_agent_notification_enabled_result.rc == 0 }}"
        - when: step|int == 2
          block:
            - name: Stop and disable ceilometer agent notification service
              service: name=openstack-ceilometer-notification state=stopped enabled=no
              when: ceilometer_agent_notification_enabled|bool
        - when: step|int == 3
          block:
            - name: Set fact for removal of openstack-ceilometer-notification package
              set_fact:
                remove_ceilometer_notification_package: {get_param: UpgradeRemoveUnusedPackages}
            - name: Remove openstack-ceilometer-notification package if operator requests it
              yum: name=openstack-ceilometer-notification state=removed
              ignore_errors: True
              when: remove_ceilometer_notification_package|bool
      fast_forward_upgrade_tasks:
        - name: FFU check if openstack-ceilometer-notification is deployed
          command: systemctl is-enabled openstack-ceilometer-notification
          ignore_errors: True
          register: ceilometer_agent_notification_enabled_result
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Set fact ceilometer_agent_notification_enabled
          set_fact:
            ceilometer_agent_notification_enabled: "{{ ceilometer_agent_notification_enabled_result.rc == 0 }}"
          when:
            - step|int == 0
            - release == 'ocata'
        - name: FFU stop and diable openstack-ceilometer-notification service
          when:
            - step|int == 1
            - release == 'ocata'
            - ceilometer_agent_notification_enabled|bool
          service: name=openstack-ceilometer-notification state=stopped enabled=no
