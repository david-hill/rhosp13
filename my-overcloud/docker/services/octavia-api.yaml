heat_template_version: queens

description: >
  OpenStack Octavia service configured with Puppet

parameters:
  DockerOctaviaApiImage:
    description: image
    type: string
  DockerOctaviaConfigImage:
    description: The container image to use for the octavia config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false
  NeutronMechanismDrivers:
    default: 'openvswitch'
    description: |
        The mechanism drivers for the Neutron tenant network.
    type: comma_delimited_list

conditions:

  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}
  is_ovn_in_neutron_mechanism_driver: {contains: ['ovn', {get_param: NeutronMechanismDrivers}]}

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  OctaviaApiPuppetBase:
    type: ../../puppet/services/octavia-api.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

  OctaviaFlavor:
    type: ../../puppet/services/octavia-worker.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Octavia API role.
    value:
      service_name: {get_attr: [OctaviaApiPuppetBase, role_data, service_name]}
      config_settings:
        map_merge:
          - {get_attr: [OctaviaApiPuppetBase, role_data, config_settings]}
          - {get_attr: [OctaviaFlavor, role_data, config_settings]}
          -
            if:
              - is_ovn_in_neutron_mechanism_driver
              - octavia::api::provider_drivers: 'amphora: The Octavia Amphora driver.,octavia: Deprecated alias of the Octavia Amphora driver.,ovn: Octavia OVN driver.'
              - {}
      logging_source: {get_attr: [OctaviaApiPuppetBase, role_data, logging_source]}
      logging_groups: {get_attr: [OctaviaApiPuppetBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [OctaviaApiPuppetBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS #
      puppet_config:
        config_volume: octavia
        puppet_tags: octavia_config
        step_config:
          list_join:
            - "\n"
            - - {get_attr: [OctaviaApiPuppetBase, role_data, step_config]}
              - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: DockerOctaviaConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/octavia_api.json:
          command: /usr/sbin/httpd -DFOREGROUND
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/octavia
              owner: octavia:octavia
              recurse: true
            - path: /var/run/octavia
              owner: octavia:octavia
              recurse: true
        /var/lib/kolla/config_files/octavia_driver_agent.json:
          command: /usr/bin/octavia-driver-agent --config-file /usr/share/octavia/octavia-dist.conf --config-file /etc/octavia/octavia.conf --log-file /var/log/octavia/driver-agent.log --config-dir /etc/octavia/conf.d/common
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/octavia
              owner: octavia:octavia
              recurse: true
            - path: /var/run/octavia
              owner: octavia:octavia
              recurse: true
      docker_puppet_tasks:
        step_5:
          config_volume: octavia
          puppet_tags: nova_flavor
          step_config:
            get_attr: [OctaviaFlavor, role_data, step_config]
          config_image: {get_param: DockerOctaviaConfigImage}
          volumes:
            - /var/lib/config-data/puppet-generated/nova/etc/nova:/etc/nova:ro
      docker_config:
        # Kolla_bootstrap/db_sync runs before permissions set by kolla_config
        step_2:
          octavia_api_init_dirs:
            start_order: 0
            image: &octavia_api_image {get_param: DockerOctaviaApiImage}
            user: root
            volumes:
              # NOTE(mandre) we need extra dir for the service in /etc/octavia/conf.d
              # It is normally created as part of the RPM install, but it is
              # missing here because we use the same config_volume for all
              # octavia services, hence the same container image to generate
              # configuration.
              - /var/lib/config-data/puppet-generated/octavia/etc/octavia:/etc/octavia/
              - /var/log/containers/octavia:/var/log/octavia
              - /var/log/containers/httpd/octavia-api:/var/log/httpd
            command: ['/bin/bash', '-c', 'mkdir -p /etc/octavia/conf.d/octavia-api; chown -R octavia:octavia /etc/octavia/conf.d/octavia-api; chown -R octavia:octavia /var/log/octavia']
        step_3:
          octavia_db_sync:
            start_order: 0
            image: *octavia_api_image
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/octavia/etc/octavia/:/etc/octavia/:ro
                  - /var/lib/config-data/octavia/etc/my.cnf.d/:/etc/my.cnf.d/:ro
                  - /var/log/containers/octavia:/var/log/octavia
                  - /var/log/containers/httpd/octavia-api:/var/log/httpd
            command: "/usr/bin/bootstrap_host_exec octavia_api su octavia -s /bin/bash -c '/usr/bin/octavia-db-manage upgrade head'"
        step_4:
          map_merge:
            - octavia_api:
                start_order: 2
                image: *octavia_api_image
                net: host
                privileged: false
                restart: always
                user: root
                healthcheck:
                  test: /openstack/healthcheck
                volumes:
                  list_concat:
                    - {get_attr: [ContainersCommon, volumes]}
                    -
                      - /var/lib/kolla/config_files/octavia_api.json:/var/lib/kolla/config_files/config.json:ro
                      - /var/lib/config-data/puppet-generated/octavia/:/var/lib/kolla/config_files/src:ro
                      - /var/log/containers/octavia:/var/log/octavia:z
                      - /var/run/octavia:/var/run/octavia:shared,z
                      - /var/log/containers/httpd/octavia-api:/var/log/httpd:z
                      -
                        if:
                          - internal_tls_enabled
                          - /etc/pki/tls/certs/httpd:/etc/pki/tls/certs/httpd:ro
                          - ''
                      -
                        if:
                          - internal_tls_enabled
                          - /etc/pki/tls/private/httpd:/etc/pki/tls/private/httpd:ro
                          - ''
                environment:
                  - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
            - if:
                - is_ovn_in_neutron_mechanism_driver
                - octavia_driver_agent:
                    start_order: 2
                    image: *octavia_api_image
                    net: host
                    privileged: true
                    restart: always
                    volumes:
                      list_concat:
                        - {get_attr: [ContainersCommon, volumes]}
                        -
                          - /var/lib/kolla/config_files/octavia_driver_agent.json:/var/lib/kolla/config_files/config.json:ro
                          - /var/lib/config-data/puppet-generated/octavia/:/var/lib/kolla/config_files/src:ro
                          - /var/log/containers/octavia:/var/log/octavia:z
                          - /var/run/octavia:/var/run/octavia:shared,z
                    environment:
                      - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
                - {}

      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item.path }}"
            state: directory
            setype: "{{ item.setype }}"
          with_items:
            - { 'path': /var/log/containers/octavia, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/log/containers/httpd/octavia-api, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/log/octavia, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/run/octavia, 'setype': svirt_sandbox_file_t, 'mode': '0755' }
        - name: octavia logs readme
          copy:
            dest: /var/log/octavia/readme.txt
            content: |
              Log files from octavia containers can be found under
              /var/log/containers/octavia and /var/log/containers/httpd/octavia-api.
          ignore_errors: true
        - name: ensure /var/run/octavia is present upon reboot
          copy:
            dest: /etc/tmpfiles.d/var-run-octavia.conf
            content: |
              d /var/run/octavia 0755 root root - -
      update_tasks:
        - name: Set internal tls variable
          set_fact:
            internal_tls_enabled: {get_param: EnableInternalTLS}
        - name: remove TLS proxy if configured and running
          when:
            - step|int == 2
            - internal_tls_enabled|bool
          docker_container:
            name: octavia_api_tls_proxy
            state: absent
      upgrade_tasks:
        - name: Set internal tls variable
          set_fact:
            internal_tls_enabled: {get_param: EnableInternalTLS}
        - when: step|int == 0
          tags: common
          block:
            - name: Check if octavia_api is deployed
              command: systemctl is-enabled --quiet openstack-octavia-api
              ignore_errors: True
              register: octavia_api_enabled_result
            - name: Set fact octavia_api_enabled
              set_fact:
                octavia_api_enabled: "{{ octavia_api_enabled_result.rc == 0 }}"
            - name: Check for octavia-api running under apache
              shell: httpd -t -D DUMP_VHOSTS | grep -q 'octavia'
              ignore_errors: True
              register: octavia_api_httpd_enabled_result
            - name: Set fact octavia_api_httpd_enabled
              set_fact:
                octavia_api_httpd_enabled: "{{ octavia_api_httpd_enabled_result.rc == 0 }}"
            - name: Check if httpd service is running
              command: systemctl is-active --quiet httpd
              ignore_errors: True
              register: httpd_running_result
              when: httpd_running is undefined
            - name: Set fact httpd_running
              set_fact:
                httpd_running: "{{ httpd_running_result.rc == 0 }}"
              when: httpd_running is undefined
        - when: step|int == 2
          block:
            - name: Stop and disable octavia_api service
              service: name=openstack-octavia-api state=stopped enabled=no
              when: octavia_api_enabled|bool
            - name: Stop octavia_api service (running under httpd)
              when:
                - octavia_api_httpd_enabled|bool
                - httpd_running|bool
              service: name=httpd state=stopped
            - name: remove TLS proxy if configured and running
              when: internal_tls_enabled|bool
              docker_container:
                name: octavia_api_tls_proxy
                state: absent
      metadata_settings:
        get_attr: [OctaviaApiPuppetBase, role_data, metadata_settings]
