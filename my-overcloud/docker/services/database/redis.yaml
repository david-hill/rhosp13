heat_template_version: queens

description: >
  OpenStack containerized Redis services

parameters:
  DockerRedisImage:
    description: image
    type: string
  DockerRedisConfigImage:
    description: The container image to use for the redis config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false

conditions:

  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}

resources:

  ContainersCommon:
    type: ../containers-common.yaml

  RedisBase:
    type: ../../../puppet/services/database/redis.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}

outputs:
  role_data:
    description: Role data for the Redis API role.
    value:
      service_name: {get_attr: [RedisBase, role_data, service_name]}
      config_settings:
        map_merge:
          - {get_attr: [RedisBase, role_data, config_settings]}
          - redis::daemonize: false
            tripleo::stunnel::manage_service: false
            tripleo::stunnel::foreground: 'yes'
          - tripleo::redis::firewall_rules:
              '108 redis':
                dport:
                  - 6379
                  - 26379
            tripleo::profile::base::database::redis::tls_proxy_bind_ip:
              str_replace:
                template:
                  "%{hiera('$NETWORK')}"
                params:
                  $NETWORK: {get_param: [ServiceNetMap, RedisNetwork]}
            tripleo::profile::base::database::redis::tls_proxy_fqdn:
              str_replace:
                template:
                  "%{hiera('fqdn_$NETWORK')}"
                params:
                  $NETWORK: {get_param: [ServiceNetMap, RedisNetwork]}
            tripleo::profile::base::database::redis::tls_proxy_port: 6379
          - if:
            - internal_tls_enabled
            - tripleo::redis::service_certificate: '/etc/pki/tls/certs/redis.crt'
              redis_certificate_specs:
                service_certificate: '/etc/pki/tls/certs/redis.crt'
                service_key: '/etc/pki/tls/private/redis.key'
                hostname:
                  str_replace:
                    template: "%{hiera('fqdn_NETWORK')}"
                    params:
                      NETWORK: {get_param: [ServiceNetMap, RedisNetwork]}
                dnsnames:
                  - str_replace:
                      template: "%{hiera('cloud_name_NETWORK')}"
                      params:
                        NETWORK: {get_param: [ServiceNetMap, RedisNetwork]}
                  - str_replace:
                      template:
                        "%{hiera('fqdn_NETWORK')}"
                      params:
                        NETWORK: {get_param: [ServiceNetMap, RedisNetwork]}
                principal:
                  str_replace:
                    template: "redis/%{hiera('fqdn_NETWORK')}"
                    params:
                      NETWORK: {get_param: [ServiceNetMap, RedisNetwork]}
                postsave_cmd: "/usr/bin/certmonger-redis-refresh.sh"
            - {}
      logging_source: {get_attr: [RedisBase, role_data, logging_source]}
      logging_groups: {get_attr: [RedisBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [RedisBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: 'redis'
        # NOTE: we need the exec tag to copy /etc/redis.conf.puppet to
        # /etc/redis.conf
        # https://github.com/arioch/puppet-redis/commit/1c004143223e660cbd433422ff8194508aab9763
        puppet_tags: 'exec'
        step_config:
          get_attr: [RedisBase, role_data, step_config]
        config_image: {get_param: DockerRedisConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/redis.json:
          command: /usr/bin/redis-server /etc/redis.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/run/redis
              owner: redis:redis
              recurse: true
        /var/lib/kolla/config_files/redis_tls_proxy.json:
          command: stunnel /etc/stunnel/stunnel.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
      docker_config:
        step_1:
          map_merge:
            - redis_init_logs:
                start_order: 0
                detach: false
                image: &redis_image {get_param: DockerRedisImage}
                privileged: false
                user: root
                volumes:
                  - /var/log/containers/redis:/var/log/redis
                command: ['/bin/bash', '-c', 'chown -R redis:redis /var/log/redis']
            - redis:
                start_order: 1
                image: *redis_image
                net: host
                privileged: false
                restart: always
                healthcheck:
                  test: /openstack/healthcheck
                volumes:
                  - /run:/run
                  - /var/lib/kolla/config_files/redis.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/redis/:/var/lib/kolla/config_files/src:ro
                  - /etc/localtime:/etc/localtime:ro
                  - /var/log/containers/redis:/var/log/redis
                  - /var/run/redis:/var/run/redis
                environment:
                  - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
            - if:
                - internal_tls_enabled
                - redis_tls_proxy:
                    start_order: 2
                    image: *redis_image
                    net: host
                    user: root
                    restart: always
                    healthcheck:
                      test: /openstack/healthcheck
                    volumes:
                      list_concat:
                        - {get_attr: [ContainersCommon, volumes]}
                        -
                          - /var/lib/kolla/config_files/redis_tls_proxy.json:/var/lib/kolla/config_files/config.json:ro
                          - /var/lib/config-data/puppet-generated/redis/:/var/lib/kolla/config_files/src:ro
                          - /etc/pki/tls/certs/redis.crt:/etc/pki/tls/certs/redis.crt:ro
                          - /etc/pki/tls/private/redis.key:/etc/pki/tls/private/redis.key:ro
                    environment:
                      - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
                - {}
      metadata_settings:
        get_attr: [RedisBase, role_data, metadata_settings]
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item }}"
            state: directory
            setype: "{{ item.setype }}"
          with_items:
            - { 'path': /var/log/containers/redis, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/run/redis, 'setype': container_var_run_t }
            - { 'path': /var/log/redis, 'setype': svirt_sandbox_file_t }
        - name: redis logs readme
          copy:
            dest: /var/log/redis/readme.txt
            content: |
              Log files from redis containers can be found under
              /var/log/containers/redis.
          ignore_errors: true
      update_tasks:
        - when: step|int == 0
          tags: common
          block:
            - name: Check if redis is  deployed
              command: systemctl is-enabled --quiet redis
              ignore_errors: True
              register: redis_enabled_result
            - name: Set fact redis_enabled
              set_fact:
                redis_enabled: "{{ redis_enabled_result.rc == 0 }}"
        - when: step|int == 1
          tags: common
          block:
            - name: Ensure redis is uninstalled on container host
              when: redis_enabled|bool == false
              package:
                name: redis
                state: absent
      upgrade_tasks:
        - when: step|int == 0
          tags: common
          block:
            - name: Check if redis is  deployed
              command: systemctl is-enabled --quiet redis
              ignore_errors: True
              register: redis_enabled_result
            - name: Set fact redis_enabled
              set_fact:
                redis_enabled: "{{ redis_enabled_result.rc == 0 }}"
        - when:
            - step|int == 2
            - redis_enabled|bool
          block:
            - name: Stop and disable redis service
              service: name=redis state=stopped enabled=no
            - name: Ensure redis is uninstalled on container host
              package:
                name: redis
                state: absent
