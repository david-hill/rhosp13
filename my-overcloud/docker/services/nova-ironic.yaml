heat_template_version: queens

description: >
  OpenStack containerized Nova Ironic Compute service

parameters:
  DockerNovaComputeIronicImage:
    description: image
    type: string
  DockerNovaConfigImage:
    description: The container image to use for the nova config_volume
    type: string
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  NovaComputeCommon:
    type: ./nova-compute-common.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

  NovaIronicBase:
    type: ../../puppet/services/nova-ironic.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Nova Compute service.
    value:
      service_name: {get_attr: [NovaIronicBase, role_data, service_name]}
      config_settings: {get_attr: [NovaIronicBase, role_data, config_settings]}
      logging_source: {get_attr: [NovaIronicBase, role_data, logging_source]}
      logging_groups: {get_attr: [NovaIronicBase, role_data, logging_groups]}
      puppet_config:
        config_volume: nova
        puppet_tags: nova_config,nova_paste_api_ini
        step_config:
          list_join:
            - "\n"
            - - {get_attr: [NovaIronicBase, role_data, step_config]}
              - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: DockerNovaConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/nova_ironic.json:
          command: /usr/bin/nova-compute
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
            - source: "/var/lib/kolla/config_files/src-iscsid/*"
              dest: "/etc/iscsi/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/nova
              owner: nova:nova
              recurse: true
      docker_config_scripts: {get_attr: [NovaComputeCommon, docker_config_scripts]}
      docker_config:
        step_3:
          nova_statedir_owner:
            image: &nova_ironic_image {get_param: DockerNovaComputeIronicImage}
            user: root
            privileged: false
            detach: false
            volumes:
              - /var/lib/nova:/var/lib/nova:shared
              - /var/lib/docker-config-scripts/:/docker-config-scripts/
            command: "/docker-config-scripts/nova_statedir_ownership.py"
        step_4:
          nova_compute:
            start_order: 100 # After the ironic services
            image: *nova_ironic_image
            net: host
            privileged: true
            user: root
            restart: always
            healthcheck:
              test:
                list_join:
                  - ' '
                  - - '/openstack/healthcheck'
                    - yaql:
                        expression: str($.data.port)
                        data:
                          port: {get_attr: [NovaIronicBase, role_data, config_settings, 'nova::rabbit_port']}
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/nova_ironic.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/nova/:/var/lib/kolla/config_files/src:ro
                  - /etc/iscsi:/var/lib/kolla/config_files/src-iscsid:ro
                  - /run:/run
                  - /dev:/dev
                  - /var/lib/iscsi:/var/lib/iscsi
                  - /var/lib/nova/:/var/lib/nova:shared
                  - /var/log/containers/nova:/var/log/nova
            environment:
             - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
          nova_wait_for_compute_service:
            start_order: 101
            image: *nova_ironic_image
            net: host
            detach: false
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/nova/etc/my.cnf.d/:/etc/my.cnf.d/:ro
                  - /var/lib/config-data/nova/etc/nova/:/etc/nova/:ro
                  - /var/log/containers/nova:/var/log/nova
                  - /var/lib/docker-config-scripts/:/docker-config-scripts/
            user: root
            command: "/docker-config-scripts/nova_wait_for_compute_service.py"
        step_5:
          nova_cell_v2_discover_hosts:
            start_order: 0
            image: *nova_ironic_image
            net: host
            detach: false
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/nova/etc/my.cnf.d/:/etc/my.cnf.d/:ro
                  - /var/lib/config-data/nova/etc/nova/:/etc/nova/:ro
                  - /var/log/containers/nova:/var/log/nova
                  - /var/lib/docker-config-scripts/:/docker-config-scripts/
            user: root
            command: "su nova -s /bin/bash -c '/docker-config-scripts/nova_cell_v2_discover_hosts.py'"
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item.path }}"
            state: directory
            setype: "{{ item.setype }}"
          with_items:
            - { 'path': /var/log/containers/nova, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/lib/nova, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/log/nova, 'setype': svirt_sandbox_file_t }
        - name: nova logs readme
          copy:
            dest: /var/log/nova/readme.txt
            content: |
              Log files from nova containers can be found under
              /var/log/containers/nova and /var/log/containers/httpd/nova-*.
          ignore_errors: true
      upgrade_tasks:
        - when: step|int == 0
          tags: common
          block:
            - name: Check if nova ironic is deployed
              command: systemctl is-enabled --quiet openstack-nova-compute
              ignore_errors: True
              register: nova_ironic_enabled_result
            - name: Set fact nova_ironic_enabled
              set_fact:
                nova_ironic_enabled: "{{ nova_ironic_enabled_result.rc == 0 }}"
        - when: step|int == 2
          block:
            - name: Stop and disable nova-compute service
              when: nova_ironic_enabled|bool
              service: name=openstack-nova-compute state=stopped enabled=no
        - when: step|int == 3
          block:
            - name: Set fact for removal of openstack-nova-compute package
              set_fact:
                remove_nova_compute_package: {get_param: UpgradeRemoveUnusedPackages}
            - name: Remove openstack-nova-compute package if operator requests it
              yum: name=openstack-nova-compute state=removed
              ignore_errors: True
              when: remove_nova_compute_package|bool
      fast_forward_upgrade_tasks:
        - name: Check if nova ironic is deployed
          command: systemctl is-enabled --quiet openstack-nova-compute
          tags: common
          register: nova_ironic_enabled_result
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Set fact nova_ironic_enabled
          set_fact:
            nova_ironic_enabled: "{{ nova_ironic_enabled_result.rc == 0 }}"
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Stop and disable nova-compute service
          service: name=openstack-nova-compute state=stopped
          when:
            - step|int == 1
            - release == 'ocata'
            - nova_ironic_enabled|bool
        - name: Set upgrade marker in nova statedir
          when:
            - step|int == 1
            - release == 'ocata'
            - nova_ironic_enabled|bool
          file: path=/var/lib/nova/upgrade_marker state=touch owner=nova group=nova
